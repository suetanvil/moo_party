// Generated by CoffeeScript 1.12.5
var CowPanelBuilder, CowSay, TextFill,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

TextFill = (function() {
  function TextFill(width) {
    this.mergeToBlock = bind(this.mergeToBlock, this);
    this.tokenize = bind(this.tokenize, this);
    this.width = width;
  }

  TextFill.prototype.width = TextFill.width;

  TextFill.prototype.tokenize = function(text) {
    var _, m, tok, tokens;
    tokens = [];
    while (true) {
      m = text.match(/^\s*(\S+)\s*([^]*)/);
      if (!m) {
        break;
      }
      _ = m[0], tok = m[1], text = m[2];
      tokens.push(tok);
    }
    return tokens;
  };

  TextFill.prototype.mergeToBlock = function(tokens) {
    var current, first, result, tok;
    result = [];
    current = '';
    tokens = tokens.concat('');
    first = true;
    while (tokens.length) {
      tok = tokens.shift();
      if (tok.length > this.width) {
        tokens.unshift(tok.substring(this.width - 3));
        tok = tok.substring(0, this.width - 3) + '-';
      }
      if (current.length + 1 + tok.length > this.width || tokens.length === 0) {
        current += ' '.repeat(this.width - current.length);
        result.push(current);
        current = tok;
      } else {
        if (!first) {
          current += ' ';
        }
        current += tok;
      }
      first = false;
    }
    return result;
  };

  return TextFill;

})();

CowPanelBuilder = (function() {
  function CowPanelBuilder(textfill) {
    this.makeCow = bind(this.makeCow, this);
    this._replaceAt = bind(this._replaceAt, this);
    this.makeBubble = bind(this.makeBubble, this);
    this.makeSingleLineBubble = bind(this.makeSingleLineBubble, this);
    this.makePanel = bind(this.makePanel, this);
    this.cow = '\\   ^__^\n \\  (oo)\\_______\n    (__)\\       )\\/\\\n        ||----w |\n        ||     ||'.split("\n");
    this.cowWidth = Math.max.apply(Math, this.cow.map(function(l) {
      return l.length;
    }));
    this.cow = this.cow.map((function(_this) {
      return function(l) {
        return l + ' '.repeat(_this.cowWidth - l.length);
      };
    })(this));
    this.textfill = textfill;
    this.leftBorderWidth = 2;
    this.rightBorderWidth = 2;
    this.borderWidth = this.leftBorderWidth + this.rightBorderWidth;
    this.panelWidth = textfill.width + this.borderWidth;
    this.speechOffset = 4;
  }

  CowPanelBuilder.prototype.makePanel = function(text, reverse) {
    var panel;
    panel = this.makeBubble(text, reverse);
    panel.push.apply(panel, this.makeCow(reverse, panel.length === 0));
    return panel;
  };

  CowPanelBuilder.prototype.makeSingleLineBubble = function(text, reverse) {
    var bar, cowLeft, leftPad, leftPadSz, ref, rightPad, rightPadSz, width;
    text = text.trim();
    if (text === '') {
      return [];
    }
    text = '< ' + text + ' >';
    width = text.length;
    cowLeft = Math.ceil((this.panelWidth - this.cowWidth) / 2);
    leftPadSz = Math.max(0, cowLeft - Math.round(width / 2));
    rightPadSz = this.panelWidth - (leftPadSz + width);
    leftPad = ' '.repeat(leftPadSz);
    rightPad = ' '.repeat(rightPadSz);
    if (reverse) {
      ref = [leftPad, rightPad], rightPad = ref[0], leftPad = ref[1];
    }
    bar = (function(_this) {
      return function(c) {
        return ' ' + c.repeat(text.length - 2) + ' ';
      };
    })(this);
    return [bar('_'), text, bar('-')].map((function(_this) {
      return function(l) {
        return leftPad + l + rightPad;
      };
    })(this));
  };

  CowPanelBuilder.prototype.makeBubble = function(text, reverse) {
    var border, first, last, lines, width;
    if (text.length === 0) {
      return [];
    }
    lines = this.textfill.mergeToBlock(text);
    if (lines.length === 1) {
      return this.makeSingleLineBubble(lines[0], reverse);
    }
    width = this.textfill.width;
    first = '/ ' + lines.shift() + ' \\';
    last = '\\ ' + lines.pop() + ' /';
    lines = lines.map(function(l) {
      return '| ' + l + ' |';
    });
    lines.unshift(first);
    lines.push(last);
    border = (function(_this) {
      return function(ll) {
        return ' ' + ll.repeat(width + 2) + ' '.repeat(_this.textfill.width + 1 - width);
      };
    })(this);
    lines.unshift(border('_'));
    lines.push(border('-'));
    return lines;
  };

  CowPanelBuilder.prototype._replaceAt = function(str, index, newStr) {
    return str.substr(0, index) + newStr + str.substr(index + newStr.length);
  };

  CowPanelBuilder.prototype.makeCow = function(reverse, silent) {
    var cow, left, pad, right;
    cow = this.cow.slice();
    if (silent) {
      cow[0] = this._replaceAt(cow[0], 0, ' ');
      cow[1] = this._replaceAt(cow[1], 1, ' ');
    }
    if (reverse) {
      cow = cow.map(function(line) {
        var parts;
        parts = line.split('').reverse();
        parts = parts.map(function(c) {
          switch (c) {
            case '/':
              return '\\';
            case '\\':
              return '/';
            case '(':
              return ')';
            case ')':
              return '(';
            default:
              return c;
          }
        });
        return parts.join('');
      });
    }
    pad = this.panelWidth - cow[0].length;
    if (pad <= 0) {
      return cow;
    }
    left = ' '.repeat(Math.ceil(pad / 2));
    right = ' '.repeat(Math.floor(pad / 2));
    cow = cow.map(function(l) {
      return left + l + right;
    });
    return cow;
  };

  return CowPanelBuilder;

})();

CowSay = (function() {
  function CowSay() {
    this.joinPanels = bind(this.joinPanels, this);
    this.assemble = bind(this.assemble, this);
    this.parse = bind(this.parse, this);
    this.render = bind(this.render, this);
    this.textfill = new TextFill(40);
    this.builder = new CowPanelBuilder(this.textfill);
  }

  CowSay.prototype.render = function(text) {
    var commands, frames;
    text = text.replace(/[^\x00-\x7f]/g, '?');
    commands = this.parse(text);
    frames = this.assemble(commands);
    return frames.map((function(_this) {
      return function(f) {
        return f.join("\n");
      };
    })(this)).join("\n\n\n");
  };

  CowSay.prototype.parse = function(text) {
    var c, commands, curr, flags, i, j, len, len1, ref, tok, toks;
    toks = this.textfill.tokenize(text);
    toks.push('@');
    commands = [];
    curr = [];
    flags = ['firstcmd'];
    for (i = 0, len = toks.length; i < len; i++) {
      tok = toks[i];
      if (!tok.match(/^@[^a-zA-Z0-9]*$/)) {
        curr.push(tok);
        continue;
      }
      if (tok.match(/^@@/)) {
        curr.push(tok.substr(1));
        continue;
      }
      commands.push([flags, curr]);
      curr = [];
      flags = ['cmd'];
      ref = tok.slice(1).split('');
      for (j = 0, len1 = ref.length; j < len1; j++) {
        c = ref[j];
        switch (c) {
          case '>':
            flags.push('right');
            break;
          case '!':
            flags.push('reverse');
            break;
          case '*':
            if (commands.length > 0) {
              commands.pop();
            }
        }
      }
    }
    return commands;
  };

  CowSay.prototype.assemble = function(commands) {
    var cmd, i, left, len, panel, panels, ref, tokens;
    panels = [];
    for (i = 0, len = commands.length; i < len; i++) {
      ref = commands[i], cmd = ref[0], tokens = ref[1];
      if (cmd.includes('noshow')) {
        continue;
      }
      panel = this.builder.makePanel(tokens, cmd.includes('reverse'));
      if (cmd.includes('right') && panels.length > 0) {
        left = panels.pop();
        panel = this.joinPanels(left, panel);
      }
      panels.push(panel);
    }
    return panels;
  };

  CowSay.prototype.joinPanels = function(left, right) {
    var i, j, n, newheight, pad, ref, ref1, result, results, toPad, width;
    newheight = Math.max(left.length, right.length);
    toPad = left.length > right.length ? right : left;
    width = toPad[0].length;
    pad = ' '.repeat(width);
    (function() {
      results = [];
      for (var i = 0, ref = newheight - toPad.length; 0 <= ref ? i < ref : i > ref; 0 <= ref ? i++ : i--){ results.push(i); }
      return results;
    }).apply(this).forEach((function(_this) {
      return function() {
        return toPad.unshift(pad);
      };
    })(this));
    result = [];
    for (n = j = 0, ref1 = newheight; 0 <= ref1 ? j < ref1 : j > ref1; n = 0 <= ref1 ? ++j : --j) {
      result.push(left[n] + "     " + right[n]);
    }
    return result;
  };

  return CowSay;

})();
